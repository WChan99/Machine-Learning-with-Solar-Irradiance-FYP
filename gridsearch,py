import pandas as pd
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RationalQuadratic
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.metrics import mean_squared_error

# Reading the dataset
df = pd.read_csv('Testing.csv')

# Converting the date/time strings to datetime objects
df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y')
df['Time'] = pd.to_datetime(df['Time'], format='%H:%M')

# Extracting the year, month, day and hour as separate integers
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day
df['Hour']=df['Time'].dt.hour
df['Minute']=df['Time'].dt.minute

# Features (excluding time-related features)
X = df.drop(columns=['Date', 'Time'])

# Target variable
y = df['Solar Irradiance']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the parameter grid for RationalQuadratic kernel
param_grid = {
    'kernel': [RationalQuadratic(alpha=5e2, length_scale=1.0)],
    'n_restarts_optimizer': [5, 10, 20, 25]  # You can adjust other hyperparameters here
}

# Create the Gaussian Process Regressor
gp = GaussianProcessRegressor()

# Perform GridSearchCV
grid_search = GridSearchCV(gp, param_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search.fit(X_train, y_train)

# Get the best hyperparameters
best_params = grid_search.best_params_
print("Best hyperparameters:", best_params)

# Evaluate the model on the test set
y_pred = grid_search.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error on test set: {mse:.2f}")

